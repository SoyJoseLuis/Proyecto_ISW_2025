CREATE TABLE ESTUDIANTE (
    RUT_ESTUDIANTE VARCHAR(12) PRIMARY KEY,
    NOMBRE_ESTUDIANTE VARCHAR(15),
    PASS_ESTUDIANTE VARCHAR(84),
    SESION_ESTUDIANTE BOOLEAN,
    FECHA_DESACTIVACION VARCHAR(10),
    CORREO_ESTUDIANTE VARCHAR(50),
    GENERACION_INGRESO INT
);

CREATE OR REPLACE FUNCTION verificar_rut() RETURNS TRIGGER AS $$
DECLARE
  rut_text VARCHAR;
  dv_esperado CHAR;
  dv_proporcionado CHAR;
  suma INTEGER := 0;
  factor INTEGER := 2;
  resto INTEGER;
  i INTEGER;
BEGIN
  rut_text := REPLACE(NEW.rut_estudiante, '.', '');
  rut_text := REPLACE(rut_text, '-', '');
  dv_proporcionado := UPPER(SUBSTRING(rut_text FROM LENGTH(rut_text)));
  rut_text := SUBSTRING(rut_text FROM 1 FOR LENGTH(rut_text) - 1);
  FOR i IN REVERSE LENGTH(rut_text)..1 LOOP
    suma := suma + (CAST(SUBSTRING(rut_text FROM i FOR 1) AS INTEGER) * factor);
    factor := factor + 1;
    IF factor > 7 THEN
      factor := 2;
    END IF;
  END LOOP;
  resto := suma % 11;
  dv_esperado := CASE
    WHEN (11 - resto) = 11 THEN '0'
    WHEN (11 - resto) = 10 THEN 'K'
    ELSE CAST((11 - resto) AS CHAR)
  END;
  IF dv_esperado != dv_proporcionado THEN
    RAISE EXCEPTION 'RUT inválido: el dígito verificador (%) no coincide con el esperado (%)', dv_proporcionado, dv_esperado;
  END IF;
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trigger_verificar_rut
BEFORE INSERT ON estudiante
FOR EACH ROW
EXECUTE FUNCTION verificar_rut();




CREATE TABLE ROL (
    ID_ROL BIGSERIAL PRIMARY KEY,
    DESCRIPCION_ROL VARCHAR(50)
);

CREATE TABLE NOTIFICACION (
    ID_NOTIFICACION BIGSERIAL PRIMARY KEY,
    DESCRIPCION_NOTIFICACION VARCHAR
);

CREATE TABLE TIPO_ACTIVIDAD (
    ID_TIPO_ACTIVIDAD BIGSERIAL PRIMARY KEY,
    DESCRIPCION_TIPO_ACTIVIDAD VARCHAR(30),
    FINES_DE_LUCRO BOOLEAN
);

CREATE TABLE ESTADO_ACTIVIDAD (
    ID_ESTADO_ACTIVIDAD BIGSERIAL PRIMARY KEY,
    DESCRIPCION_ESTADO_ACTIVIDAD VARCHAR(30)
);

CREATE TABLE TIPO_TRANSACCION (
    ID_TIPO_TRANSACCION BIGSERIAL PRIMARY KEY,
    DESCRIPCION_TRANSACCION VARCHAR(20)
);

CREATE TABLE META_FINANCIERA (
    ID_META_FINANCIERA BIGSERIAL PRIMARY KEY,
    META_FINANCIERA INT,
    DESCRIPCION_META VARCHAR(50),
    FECHA_REGISTRO DATE DEFAULT CURRENT_DATE,
    PORCENTAJE_CRECIMIENTO INT
);

CREATE TABLE BALANCE_CEE (
    ID_BALANCE_CEE BIGSERIAL PRIMARY KEY,
    PERIODO VARCHAR(10) DEFAULT TO_CHAR(CURRENT_DATE, 'YYYY-MM'),
    MONTO_ACTUAL INT,
    TOTAL_INGRESOS INT,
    TOTAL_SALIDAS INT
);

CREATE TABLE ACTIVIDAD (
    ID_ACTIVIDAD BIGSERIAL PRIMARY KEY,
    DESCRIPCION_ACTIVIDAD VARCHAR(50),
    TITULO_ACTIVIDAD VARCHAR(25),
    FECHA_ACTIVIDAD VARCHAR(10),
    HORA_INICIO_ACTIVIDAD VARCHAR(8),
    HORA_TERMINO_ACTIVIDAD VARCHAR(8),
    UBICACION_ACTIVIDAD VARCHAR(40),
    ID_ESTADO_ACTIVIDAD BIGINT NOT NULL,
    ID_TIPO_ACTIVIDAD BIGINT NOT NULL,
    CONSTRAINT FK_ACTIVIDAD_ESTADO FOREIGN KEY (ID_ESTADO_ACTIVIDAD) REFERENCES ESTADO_ACTIVIDAD(ID_ESTADO_ACTIVIDAD),
    CONSTRAINT FK_ACTIVIDAD_TIPO FOREIGN KEY (ID_TIPO_ACTIVIDAD) REFERENCES TIPO_ACTIVIDAD(ID_TIPO_ACTIVIDAD)
);

CREATE TABLE TOKEN_ASISTENCIA (
    CODIGO_TOKEN INT PRIMARY KEY,
    ID_ACTIVIDAD BIGINT NOT NULL,
    ESTADO_TOKEN BOOLEAN,
    CONSTRAINT FK_TOKEN_ACTIVIDAD FOREIGN KEY (ID_ACTIVIDAD) REFERENCES ACTIVIDAD(ID_ACTIVIDAD)
);

CREATE TABLE ASISTENCIA_ACTIVIDAD (
    ID_ACTIVIDAD BIGINT NOT NULL,
    RUT_ESTUDIANTE VARCHAR(12) NOT NULL,
    DOBLE_CONFIRMACION BOOLEAN,
    PRIMARY KEY (ID_ACTIVIDAD, RUT_ESTUDIANTE),
    CONSTRAINT FK_ASISTENCIA_ACTIVIDAD FOREIGN KEY (ID_ACTIVIDAD) REFERENCES ACTIVIDAD(ID_ACTIVIDAD),
    CONSTRAINT FK_ASISTENCIA_ESTUDIANTE FOREIGN KEY (RUT_ESTUDIANTE) REFERENCES ESTUDIANTE(RUT_ESTUDIANTE)
);

CREATE TABLE PANEL_NOTIFICACIONES (
    RUT_ESTUDIANTE VARCHAR(12) NOT NULL,
    ID_NOTIFICACION BIGINT NOT NULL,
    ID_ACTIVIDAD BIGINT NOT NULL,
    PRIMARY KEY (RUT_ESTUDIANTE, ID_NOTIFICACION, ID_ACTIVIDAD),
    CONSTRAINT FK_PANEL_ESTUDIANTE FOREIGN KEY (RUT_ESTUDIANTE) REFERENCES ESTUDIANTE(RUT_ESTUDIANTE),
    CONSTRAINT FK_PANEL_NOTIFICACION FOREIGN KEY (ID_NOTIFICACION) REFERENCES NOTIFICACION(ID_NOTIFICACION),
    CONSTRAINT FK_PANEL_ACTIVIDAD FOREIGN KEY (ID_ACTIVIDAD) REFERENCES ACTIVIDAD(ID_ACTIVIDAD)
);

CREATE TABLE TRANSACCION (
    ID_TRANSACCION BIGSERIAL PRIMARY KEY,
    MONTO_TRANSACCION INT,
    FECHA_TRANSACCION VARCHAR(10),
    RUT_ESTUDIANTE VARCHAR(12) NOT NULL,
    ID_TIPO_TRANSACCION BIGINT NOT NULL,
    MOTIVO_TRANSACCION VARCHAR(30),
    ID_ACTIVIDAD BIGINT,
    CONSTRAINT FK_TRANSACCION_ESTUDIANTE FOREIGN KEY (RUT_ESTUDIANTE) REFERENCES ESTUDIANTE(RUT_ESTUDIANTE),
    CONSTRAINT FK_TRANSACCION_TIPO FOREIGN KEY (ID_TIPO_TRANSACCION) REFERENCES TIPO_TRANSACCION(ID_TIPO_TRANSACCION),
    CONSTRAINT FK_TRANSACCION_ACTIVIDAD FOREIGN KEY (ID_ACTIVIDAD) REFERENCES ACTIVIDAD(ID_ACTIVIDAD)
);

CREATE TABLE ESTUDIANTE_ROL (
    RUT_ESTUDIANTE VARCHAR(12) NOT NULL,
    ID_ROL BIGINT NOT NULL,
    PRIMARY KEY (RUT_ESTUDIANTE, ID_ROL),
    CONSTRAINT FK_ESTUDIANTE_ROL_ESTUDIANTE FOREIGN KEY (RUT_ESTUDIANTE) REFERENCES ESTUDIANTE(RUT_ESTUDIANTE),
    CONSTRAINT FK_ESTUDIANTE_ROL_ROL FOREIGN KEY (ID_ROL) REFERENCES ROL(ID_ROL)
);

INSERT INTO notificacion (id_notificacion, descripcion_notificacion) VALUES
(1, 'El CEE ICINF ha creado una actividad.');

INSERT INTO estado_actividad (descripcion_estado_actividad) VALUES
('En proceso'),
('Archivada'),
('Pendiente'),
('Finalizada');


INSERT INTO tipo_actividad (descripcion_tipo_actividad, fines_de_lucro) VALUES
  ('Reunión', false),
  ('Evento benéfico', false),
  ('Charla pagada', true),
  ('Taller gratuito', false);
